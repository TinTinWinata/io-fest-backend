// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  username          String            @unique
  name              String
  password          String
  isActive          Boolean           @default(false)
  posts             Post[]
  following         UserFollow[]      @relation("following")
  followers         UserFollow[]      @relation("followers")
  likedPosts        PostLike[]
  likedPostComments PostCommentLike[]
  activationId      ActivationLink?

  @@map("users")
}

model ActivationLink {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String   @unique
  expirationDate DateTime @default(dbgenerated("NOW() + INTERVAL '2 HOUR'"))

  @@map("activation_links")
}

model UserFollow {
  userId          User   @relation("following", fields: [userFollowingId], references: [id])
  followId        User   @relation("followers", fields: [userFollowerId], references: [id])
  userFollowingId String
  userFollowerId  String

  @@id([userFollowingId, userFollowerId])
  @@map("user_follows")
}

model Post {
  id        String        @id @default(uuid())
  caption   String
  creator   User          @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime      @default(now())
  likes     PostLike[]
  comments  PostComment[]

  @@map("posts")
}

model PostLike {
  liker     User   @relation(fields: [userId], references: [id])
  likedPost Post   @relation(fields: [postId], references: [id])
  userId    String
  postId    String

  @@id([userId, postId])
  @@map("post_likes")
}

model PostComment {
  id              String            @id @default(uuid())
  comment         String
  commentedPost   Post              @relation(fields: [postId], references: [id])
  postId          String
  createdAt       DateTime          @default(now())
  PostCommentLike PostCommentLike[]

  @@map("post_comments")
}

model PostCommentLike {
  liker            User        @relation(fields: [userId], references: [id])
  likedPostComment PostComment @relation(fields: [postCommentId], references: [id])
  userId           String
  postCommentId    String

  @@id([userId, postCommentId])
  @@map("post_comment_likes")
}
