// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  username       String          @unique
  name           String
  password       String
  role           UserRole        @default(Member)
  isActive       Boolean         @default(false)
  profilePicture String?
  forums         Forum[]         @relation("forumCreator")
  activationLink ActivationLink?
  refreshToken   String?
  forumComments  ForumComment[]
  ForumReply     ForumReply[]

  @@map("users")
}

enum UserRole {
  Admin  @map("Admin")
  Member @map("Member")
  Doctor @map("Doctor")

  @@map("user_roles")
}

model ActivationLink {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String   @unique
  expirationDate DateTime @default(dbgenerated("NOW() + INTERVAL '2 HOUR'"))

  @@map("activation_links")
}

model Forum {
  id               String            @id @default(uuid())
  title            String
  description      String
  creator          User              @relation("forumCreator", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  forumComments    ForumComment[]
  seen             Int
  forumAttachments ForumAttachment[]

  @@map("forums")
}

model ForumAttachment {
  attachedForum Forum               @relation(fields: [forumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  forumId       String
  path          String
  type          ForumAttachmentType

  @@id([forumId, path])
  @@map("forum_attachments")
}

enum ForumAttachmentType {
  Video @map("Video")
  Image @map("Image")

  @@map("forum_attachment_types")
}

model ForumComment {
  id             String       @id @default(uuid())
  comment        String
  commentedForum Forum        @relation(fields: [forumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  forumId        String
  commenter      User         @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime     @default(now())
  forumReplies   ForumReply[]

  @@map("forum_comments")
}

model ForumReply {
  id             String       @id @default(uuid())
  reply          String
  repliedComment ForumComment @relation(fields: [forumCommentId], references: [id])
  forumCommentId String
  replier        User         @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime     @default(now())

  @@map("forum_replies")
}
