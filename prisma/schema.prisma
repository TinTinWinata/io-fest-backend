// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  email              String             @unique
  username           String             @unique
  name               String
  password           String
  isActive           Boolean            @default(false)
  forums             Forum[]
  following          UserFollow[]       @relation("following")
  followers          UserFollow[]       @relation("followers")
  likedForums        ForumLike[]
  likedForumComments ForumCommentLike[]
  activationId       ActivationLink?

  @@map("users")
}

model ActivationLink {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String   @unique
  expirationDate DateTime @default(dbgenerated("NOW() + INTERVAL '2 HOUR'"))

  @@map("activation_links")
}

model UserFollow {
  userId          User   @relation("following", fields: [userFollowingId], references: [id])
  followId        User   @relation("followers", fields: [userFollowerId], references: [id])
  userFollowingId String
  userFollowerId  String

  @@id([userFollowingId, userFollowerId])
  @@map("user_follows")
}

model Forum {
  id          String         @id @default(uuid())
  title       String
  description String
  creator     User           @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime       @default(now())
  likes       ForumLike[]
  comments    ForumComment[]

  @@map("forums")
}

model ForumLike {
  liker      User   @relation(fields: [userId], references: [id])
  likedForum Forum  @relation(fields: [forumId], references: [id])
  userId     String
  forumId    String

  @@id([userId, forumId])
  @@map("forum_likes")
}

model ForumComment {
  id               String             @id @default(uuid())
  comment          String
  commentedForum   Forum              @relation(fields: [ForumId], references: [id])
  ForumId          String
  createdAt        DateTime           @default(now())
  forumCommentLike ForumCommentLike[]

  @@map("forum_comments")
}

model ForumCommentLike {
  liker             User         @relation(fields: [userId], references: [id])
  likedForumComment ForumComment @relation(fields: [forumCommentId], references: [id])
  userId            String
  forumCommentId    String

  @@id([userId, forumCommentId])
  @@map("forum_comment_likes")
}
